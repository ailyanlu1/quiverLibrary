{
  "title": "Inorder tree traversal without recursion or stack (Morris Traversal)",
  "cells": [
    {
      "type": "markdown",
      "data": "Inorder tree traversal without recursion or stack (fast traversal) is typically called the [Morris traversal](http://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion-and-without-stack/) and this is based on the idea of [threaded binary trees](https://en.wikipedia.org/wiki/Threaded_binary_tree)."
    },
    {
      "type": "markdown",
      "data": "The problem with typical inorder traversal is that they are implemented using recursion or an explicit stack. If the tree is fairly balanced the stack space needed is  `O(log n)` but for skewed trees this can incur massive stack space requirements, in the order of `O(n)`. Fast traversal eliminates this problem by using thread pointers that point to the successor of the node."
    },
    {
      "type": "markdown",
      "data": "A threaded binary tree is defined as follows --\n*A binary tree is threaded by making all right child pointers that would normally be null point to the inorder successor of the node (if it exists), and all left child pointers that would normally be null point to the inorder predecessor of the node.*\n\nIt is also possible to identify the parent of a node using a threaded tree without the parent pointers or a stack albeit slowly. The following code demonstrates a possible implementation."
    },
    {
      "type": "code",
      "language": "python",
      "data": "def parent(node):\n    if node is node.tree.root:\n        return None\n    else:\n        x = node\n        y = node\n        while True:\n            if is_thread(y):\n                p = y.right\n                if p is None or p.left is not node:\n                    p = x\n                    while not is_thread(p.left):\n                        p = p.left\n                    p = p.left\n                return p\n            elif is_thread(x):\n                p = x.left\n                if p is None or p.right is not node:\n                    p = y\n                    while not is_thread(p.right):\n                        p = p.right\n                    p = p.right\n                return p\n            x = x.left\n            y = y.right"
    },
    {
      "type": "markdown",
      "data": "Algorithm for morris traversal (Inorder)."
    },
    {
      "type": "code",
      "language": "c_cpp",
      "data": "vector<int> Solution::inorderTraversal(TreeNode* A) {\n    vector<int> traversal;\n    TreeNode* curr = A;\n    while(curr != NULL){\n        if(curr->left == NULL){\n            traversal.push_back(curr->val);\n            curr = curr->right;\n        }\n        else{\n            TreeNode* pre = curr->left;\n            while(pre->right != NULL && pre->right != curr){\n                pre = pre->right;\n            }\n            if(pre->right == NULL){\n                pre->right = curr;\n                curr = curr->left;\n            }\n            else{\n                pre->right = NULL;\n                traversal.push_back(curr->val);\n                curr = curr->right;\n            }\n        }\n    }\n    return traversal;\n}"
    },
    {
      "type": "markdown",
      "data": "Algorithm for morris traversal (Preorder)."
    },
    {
      "type": "code",
      "language": "c_cpp",
      "data": "vector<int> Solution::preorderTraversal(TreeNode* A) {\n    vector<int> traversal;\n    TreeNode* curr = A;\n    while(curr != NULL){\n        if(curr->left == NULL){\n            traversal.push_back(curr->val);\n            curr = curr->right;\n        }\n        else{\n            TreeNode* pre = curr->left;\n            while(pre->right != NULL && pre->right != curr)\n                pre = pre->right;\n            if(pre->right == NULL){\n                traversal.push_back(curr->val);\n                pre->right = curr;\n                curr = curr->left;\n            }\n            else{\n                pre->right = NULL;\n                curr = curr->right;\n            }\n        }\n    }\n    return traversal;\n}"
    }
  ]
}